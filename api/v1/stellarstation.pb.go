// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stellarstation/api/v1/stellarstation.proto

package stellarstation

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A type of framing of a binary payload used in satellite communicaation.
type Framing int32

const (
	// No framing done in the API. All payloads are assumed to be pre-framed and ready for
	// transmission to the satellite or API client with no additional processing.
	Framing_BITSTREAM Framing = 0
	// AX.25 (Amateur X.25) framing - https://en.wikipedia.org/wiki/AX.25
	Framing_AX25 Framing = 1
	// No framing or demodulation done in the API. Raw IQ data is sent to the API client with no
	// additional processing.
	Framing_IQ Framing = 2
	// A decoded PNG image frame.
	Framing_IMAGE_PNG Framing = 3
)

var Framing_name = map[int32]string{
	0: "BITSTREAM",
	1: "AX25",
	2: "IQ",
	3: "IMAGE_PNG",
}
var Framing_value = map[string]int32{
	"BITSTREAM": 0,
	"AX25":      1,
	"IQ":        2,
	"IMAGE_PNG": 3,
}

func (x Framing) String() string {
	return proto.EnumName(Framing_name, int32(x))
}
func (Framing) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_6f240bf3576d2939, []int{0}
}

// Request for the `OpenSatelliteStream` method.
type SatelliteStreamRequest struct {
	// The ID of the satellite to open a stream with. The ID of a satellite can be found on the
	// StellarStation Console page for the satellite.
	SatelliteId string `protobuf:"bytes,1,opt,name=satellite_id,json=satelliteId,proto3" json:"satellite_id,omitempty"`
	// The `SatelliteStreamResponse.stream_id` from a previously opened stream to resume. If the
	// specified stream has already expired or been closed, the stream is closed with a `ABORTED`
	// error.
	StreamId string `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// A request to send on the satellite stream. Currently only command sending to the satellite is
	// supported. The request does not need to be filled on the first request to
	// `OpenSatelliteStream`.
	//
	// Types that are valid to be assigned to Request:
	//	*SatelliteStreamRequest_SendSatelliteCommandsRequest
	Request isSatelliteStreamRequest_Request `protobuf_oneof:"Request"`
	// The `Framing` types to accept, for satellites that have been configured for multiple framings
	// (e.g., IQ + AX25). If empty, all framings produced by the satellite will be returned.
	AcceptedFraming      []Framing `protobuf:"varint,4,rep,packed,name=accepted_framing,json=acceptedFraming,proto3,enum=stellarstation.api.v1.Framing" json:"accepted_framing,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SatelliteStreamRequest) Reset()         { *m = SatelliteStreamRequest{} }
func (m *SatelliteStreamRequest) String() string { return proto.CompactTextString(m) }
func (*SatelliteStreamRequest) ProtoMessage()    {}
func (*SatelliteStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_6f240bf3576d2939, []int{0}
}
func (m *SatelliteStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SatelliteStreamRequest.Unmarshal(m, b)
}
func (m *SatelliteStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SatelliteStreamRequest.Marshal(b, m, deterministic)
}
func (dst *SatelliteStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SatelliteStreamRequest.Merge(dst, src)
}
func (m *SatelliteStreamRequest) XXX_Size() int {
	return xxx_messageInfo_SatelliteStreamRequest.Size(m)
}
func (m *SatelliteStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SatelliteStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SatelliteStreamRequest proto.InternalMessageInfo

func (m *SatelliteStreamRequest) GetSatelliteId() string {
	if m != nil {
		return m.SatelliteId
	}
	return ""
}

func (m *SatelliteStreamRequest) GetStreamId() string {
	if m != nil {
		return m.StreamId
	}
	return ""
}

type isSatelliteStreamRequest_Request interface {
	isSatelliteStreamRequest_Request()
}

type SatelliteStreamRequest_SendSatelliteCommandsRequest struct {
	SendSatelliteCommandsRequest *SendSatelliteCommandsRequest `protobuf:"bytes,3,opt,name=send_satellite_commands_request,json=sendSatelliteCommandsRequest,proto3,oneof"`
}

func (*SatelliteStreamRequest_SendSatelliteCommandsRequest) isSatelliteStreamRequest_Request() {}

func (m *SatelliteStreamRequest) GetRequest() isSatelliteStreamRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SatelliteStreamRequest) GetSendSatelliteCommandsRequest() *SendSatelliteCommandsRequest {
	if x, ok := m.GetRequest().(*SatelliteStreamRequest_SendSatelliteCommandsRequest); ok {
		return x.SendSatelliteCommandsRequest
	}
	return nil
}

func (m *SatelliteStreamRequest) GetAcceptedFraming() []Framing {
	if m != nil {
		return m.AcceptedFraming
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SatelliteStreamRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SatelliteStreamRequest_OneofMarshaler, _SatelliteStreamRequest_OneofUnmarshaler, _SatelliteStreamRequest_OneofSizer, []interface{}{
		(*SatelliteStreamRequest_SendSatelliteCommandsRequest)(nil),
	}
}

func _SatelliteStreamRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SatelliteStreamRequest)
	// Request
	switch x := m.Request.(type) {
	case *SatelliteStreamRequest_SendSatelliteCommandsRequest:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SendSatelliteCommandsRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SatelliteStreamRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _SatelliteStreamRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SatelliteStreamRequest)
	switch tag {
	case 3: // Request.send_satellite_commands_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SendSatelliteCommandsRequest)
		err := b.DecodeMessage(msg)
		m.Request = &SatelliteStreamRequest_SendSatelliteCommandsRequest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SatelliteStreamRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SatelliteStreamRequest)
	// Request
	switch x := m.Request.(type) {
	case *SatelliteStreamRequest_SendSatelliteCommandsRequest:
		s := proto.Size(x.SendSatelliteCommandsRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A request to send commands to a satellite.
//
// Next ID: 1
type SendSatelliteCommandsRequest struct {
	// The command frames to send to the satellite. All commands will be transmitted in sequence
	// immediately, during which time telemetry will not be received. After all commands have been
	// transmitted, telemetry receive will be immediately re-enabled. The maximum size of each command
	// is 2MB. If a command larger than 2MB is received, the stream will be closed with a
	// `RESOURCE_EXHAUSTED` error.
	Command              [][]byte `protobuf:"bytes,2,rep,name=command,proto3" json:"command,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendSatelliteCommandsRequest) Reset()         { *m = SendSatelliteCommandsRequest{} }
func (m *SendSatelliteCommandsRequest) String() string { return proto.CompactTextString(m) }
func (*SendSatelliteCommandsRequest) ProtoMessage()    {}
func (*SendSatelliteCommandsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_6f240bf3576d2939, []int{1}
}
func (m *SendSatelliteCommandsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendSatelliteCommandsRequest.Unmarshal(m, b)
}
func (m *SendSatelliteCommandsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendSatelliteCommandsRequest.Marshal(b, m, deterministic)
}
func (dst *SendSatelliteCommandsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendSatelliteCommandsRequest.Merge(dst, src)
}
func (m *SendSatelliteCommandsRequest) XXX_Size() int {
	return xxx_messageInfo_SendSatelliteCommandsRequest.Size(m)
}
func (m *SendSatelliteCommandsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendSatelliteCommandsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendSatelliteCommandsRequest proto.InternalMessageInfo

func (m *SendSatelliteCommandsRequest) GetCommand() [][]byte {
	if m != nil {
		return m.Command
	}
	return nil
}

// A response from the `OpenSatelliteStream` method.
type SatelliteStreamResponse struct {
	// The ID of this stream, which can be used in a subsequent call to `OpenSatelliteStream` to
	// resume this stream on interruption (e.g., if a network failure causes the connection to be
	// closed mid-stream). Telemetry received on a previously opened stream with no current listener
	// will be buffered for a maximum of 1 minute, and the stream itself will be cancelled and no more
	// buffering will occur if no client resumes the stream with `OpenSatelliteStream` within 10
	// minutes.
	StreamId string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// A response on the stream. Currently the only type of response is telemetry received from the
	// satellite.
	//
	// Types that are valid to be assigned to Response:
	//	*SatelliteStreamResponse_ReceiveTelemetryResponse
	Response             isSatelliteStreamResponse_Response `protobuf_oneof:"Response"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *SatelliteStreamResponse) Reset()         { *m = SatelliteStreamResponse{} }
func (m *SatelliteStreamResponse) String() string { return proto.CompactTextString(m) }
func (*SatelliteStreamResponse) ProtoMessage()    {}
func (*SatelliteStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_6f240bf3576d2939, []int{2}
}
func (m *SatelliteStreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SatelliteStreamResponse.Unmarshal(m, b)
}
func (m *SatelliteStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SatelliteStreamResponse.Marshal(b, m, deterministic)
}
func (dst *SatelliteStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SatelliteStreamResponse.Merge(dst, src)
}
func (m *SatelliteStreamResponse) XXX_Size() int {
	return xxx_messageInfo_SatelliteStreamResponse.Size(m)
}
func (m *SatelliteStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SatelliteStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SatelliteStreamResponse proto.InternalMessageInfo

func (m *SatelliteStreamResponse) GetStreamId() string {
	if m != nil {
		return m.StreamId
	}
	return ""
}

type isSatelliteStreamResponse_Response interface {
	isSatelliteStreamResponse_Response()
}

type SatelliteStreamResponse_ReceiveTelemetryResponse struct {
	ReceiveTelemetryResponse *ReceiveTelemetryResponse `protobuf:"bytes,2,opt,name=receive_telemetry_response,json=receiveTelemetryResponse,proto3,oneof"`
}

func (*SatelliteStreamResponse_ReceiveTelemetryResponse) isSatelliteStreamResponse_Response() {}

func (m *SatelliteStreamResponse) GetResponse() isSatelliteStreamResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *SatelliteStreamResponse) GetReceiveTelemetryResponse() *ReceiveTelemetryResponse {
	if x, ok := m.GetResponse().(*SatelliteStreamResponse_ReceiveTelemetryResponse); ok {
		return x.ReceiveTelemetryResponse
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SatelliteStreamResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SatelliteStreamResponse_OneofMarshaler, _SatelliteStreamResponse_OneofUnmarshaler, _SatelliteStreamResponse_OneofSizer, []interface{}{
		(*SatelliteStreamResponse_ReceiveTelemetryResponse)(nil),
	}
}

func _SatelliteStreamResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SatelliteStreamResponse)
	// Response
	switch x := m.Response.(type) {
	case *SatelliteStreamResponse_ReceiveTelemetryResponse:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReceiveTelemetryResponse); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SatelliteStreamResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _SatelliteStreamResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SatelliteStreamResponse)
	switch tag {
	case 2: // Response.receive_telemetry_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReceiveTelemetryResponse)
		err := b.DecodeMessage(msg)
		m.Response = &SatelliteStreamResponse_ReceiveTelemetryResponse{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SatelliteStreamResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SatelliteStreamResponse)
	// Response
	switch x := m.Response.(type) {
	case *SatelliteStreamResponse_ReceiveTelemetryResponse:
		s := proto.Size(x.ReceiveTelemetryResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A response from a satellite containing telemetry.
type ReceiveTelemetryResponse struct {
	// The telemetry received.
	Telemetry            *Telemetry `protobuf:"bytes,1,opt,name=telemetry,proto3" json:"telemetry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ReceiveTelemetryResponse) Reset()         { *m = ReceiveTelemetryResponse{} }
func (m *ReceiveTelemetryResponse) String() string { return proto.CompactTextString(m) }
func (*ReceiveTelemetryResponse) ProtoMessage()    {}
func (*ReceiveTelemetryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_6f240bf3576d2939, []int{3}
}
func (m *ReceiveTelemetryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceiveTelemetryResponse.Unmarshal(m, b)
}
func (m *ReceiveTelemetryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceiveTelemetryResponse.Marshal(b, m, deterministic)
}
func (dst *ReceiveTelemetryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveTelemetryResponse.Merge(dst, src)
}
func (m *ReceiveTelemetryResponse) XXX_Size() int {
	return xxx_messageInfo_ReceiveTelemetryResponse.Size(m)
}
func (m *ReceiveTelemetryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveTelemetryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveTelemetryResponse proto.InternalMessageInfo

func (m *ReceiveTelemetryResponse) GetTelemetry() *Telemetry {
	if m != nil {
		return m.Telemetry
	}
	return nil
}

// A chunk or frame of telemetry data that has been received from a satellite.
type Telemetry struct {
	// The framing of this telemetry data. If `RAW`, this telemetry will be an arbitrarily sized
	// chunk of the bitstream.
	Framing Framing `protobuf:"varint,1,opt,name=framing,proto3,enum=stellarstation.api.v1.Framing" json:"framing,omitempty"`
	// The payload of this telemetry.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// The actual downlink frequency, in Hz, used when receiving `data`, including adjustments for
	// doppler shift.
	DownlinkFrequencyHz uint64 `protobuf:"varint,3,opt,name=downlink_frequency_hz,json=downlinkFrequencyHz,proto3" json:"downlink_frequency_hz,omitempty"`
	// Timestamp when the first byte of `data` was received.
	TimeFirstByteReceived *timestamp.Timestamp `protobuf:"bytes,4,opt,name=time_first_byte_received,json=timeFirstByteReceived,proto3" json:"time_first_byte_received,omitempty"`
	// Timestamp when the last byte of `data` was received.
	TimeLastByteReceived *timestamp.Timestamp `protobuf:"bytes,5,opt,name=time_last_byte_received,json=timeLastByteReceived,proto3" json:"time_last_byte_received,omitempty"`
	// The binary header of the telemetry frame, if `framing` is not `RAW`.
	//
	// * AX25 - This is either Address + Control, or Address + Control + PID. The checksum is not
	//          returned.
	FrameHeader          []byte   `protobuf:"bytes,6,opt,name=frame_header,json=frameHeader,proto3" json:"frame_header,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Telemetry) Reset()         { *m = Telemetry{} }
func (m *Telemetry) String() string { return proto.CompactTextString(m) }
func (*Telemetry) ProtoMessage()    {}
func (*Telemetry) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_6f240bf3576d2939, []int{4}
}
func (m *Telemetry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Telemetry.Unmarshal(m, b)
}
func (m *Telemetry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Telemetry.Marshal(b, m, deterministic)
}
func (dst *Telemetry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Telemetry.Merge(dst, src)
}
func (m *Telemetry) XXX_Size() int {
	return xxx_messageInfo_Telemetry.Size(m)
}
func (m *Telemetry) XXX_DiscardUnknown() {
	xxx_messageInfo_Telemetry.DiscardUnknown(m)
}

var xxx_messageInfo_Telemetry proto.InternalMessageInfo

func (m *Telemetry) GetFraming() Framing {
	if m != nil {
		return m.Framing
	}
	return Framing_BITSTREAM
}

func (m *Telemetry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Telemetry) GetDownlinkFrequencyHz() uint64 {
	if m != nil {
		return m.DownlinkFrequencyHz
	}
	return 0
}

func (m *Telemetry) GetTimeFirstByteReceived() *timestamp.Timestamp {
	if m != nil {
		return m.TimeFirstByteReceived
	}
	return nil
}

func (m *Telemetry) GetTimeLastByteReceived() *timestamp.Timestamp {
	if m != nil {
		return m.TimeLastByteReceived
	}
	return nil
}

func (m *Telemetry) GetFrameHeader() []byte {
	if m != nil {
		return m.FrameHeader
	}
	return nil
}

// Request for the `ListUpcomingAvailablePasses` method.
type ListUpcomingAvailablePassesRequest struct {
	// The ID of the satellite to list passes for. The ID of a satellite can be found on the
	// StellarStation Console page for the satellite.
	SatelliteId          string   `protobuf:"bytes,1,opt,name=satellite_id,json=satelliteId,proto3" json:"satellite_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListUpcomingAvailablePassesRequest) Reset()         { *m = ListUpcomingAvailablePassesRequest{} }
func (m *ListUpcomingAvailablePassesRequest) String() string { return proto.CompactTextString(m) }
func (*ListUpcomingAvailablePassesRequest) ProtoMessage()    {}
func (*ListUpcomingAvailablePassesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_6f240bf3576d2939, []int{5}
}
func (m *ListUpcomingAvailablePassesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListUpcomingAvailablePassesRequest.Unmarshal(m, b)
}
func (m *ListUpcomingAvailablePassesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListUpcomingAvailablePassesRequest.Marshal(b, m, deterministic)
}
func (dst *ListUpcomingAvailablePassesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUpcomingAvailablePassesRequest.Merge(dst, src)
}
func (m *ListUpcomingAvailablePassesRequest) XXX_Size() int {
	return xxx_messageInfo_ListUpcomingAvailablePassesRequest.Size(m)
}
func (m *ListUpcomingAvailablePassesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUpcomingAvailablePassesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListUpcomingAvailablePassesRequest proto.InternalMessageInfo

func (m *ListUpcomingAvailablePassesRequest) GetSatelliteId() string {
	if m != nil {
		return m.SatelliteId
	}
	return ""
}

// Response for the `ListUpcomingAvailablePasses` method.
type ListUpcomingAvailablePassesResponse struct {
	// The upcoming, schedulable passes for the satellite.
	Pass                 []*Pass  `protobuf:"bytes,1,rep,name=pass,proto3" json:"pass,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListUpcomingAvailablePassesResponse) Reset()         { *m = ListUpcomingAvailablePassesResponse{} }
func (m *ListUpcomingAvailablePassesResponse) String() string { return proto.CompactTextString(m) }
func (*ListUpcomingAvailablePassesResponse) ProtoMessage()    {}
func (*ListUpcomingAvailablePassesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_6f240bf3576d2939, []int{6}
}
func (m *ListUpcomingAvailablePassesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListUpcomingAvailablePassesResponse.Unmarshal(m, b)
}
func (m *ListUpcomingAvailablePassesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListUpcomingAvailablePassesResponse.Marshal(b, m, deterministic)
}
func (dst *ListUpcomingAvailablePassesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUpcomingAvailablePassesResponse.Merge(dst, src)
}
func (m *ListUpcomingAvailablePassesResponse) XXX_Size() int {
	return xxx_messageInfo_ListUpcomingAvailablePassesResponse.Size(m)
}
func (m *ListUpcomingAvailablePassesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUpcomingAvailablePassesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListUpcomingAvailablePassesResponse proto.InternalMessageInfo

func (m *ListUpcomingAvailablePassesResponse) GetPass() []*Pass {
	if m != nil {
		return m.Pass
	}
	return nil
}

// A pass during which a satellite can be communicated with from a given ground station.
type Pass struct {
	// A unique token for this pass that can be used for scheduling it.
	ReservationToken string `protobuf:"bytes,1,opt,name=reservation_token,json=reservationToken,proto3" json:"reservation_token,omitempty"`
	// The time of Acquisition of Signal (AOS) between the ground station and satellite in this pass.
	AosTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=aos_time,json=aosTime,proto3" json:"aos_time,omitempty"`
	// The time of Loss of Signal (LOS) between the ground station and satellite in this pass.
	LosTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=los_time,json=losTime,proto3" json:"los_time,omitempty"`
	// The latitude, in degrees, of the ground station's location.
	GroundStationLatitude float64 `protobuf:"fixed64,4,opt,name=ground_station_latitude,json=groundStationLatitude,proto3" json:"ground_station_latitude,omitempty"`
	// The longitude, in degrees, of the ground station's location.
	GroundStationLongitude float64 `protobuf:"fixed64,5,opt,name=ground_station_longitude,json=groundStationLongitude,proto3" json:"ground_station_longitude,omitempty"`
	// The ISO 3166-1 alpha-2 2-letter country code for the ground station's location.
	// See https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
	GroundStationCountryCode string `protobuf:"bytes,6,opt,name=ground_station_country_code,json=groundStationCountryCode,proto3" json:"ground_station_country_code,omitempty"`
	// The max elevation during the pass, in degrees.
	MaxElevationDegrees float64 `protobuf:"fixed64,7,opt,name=max_elevation_degrees,json=maxElevationDegrees,proto3" json:"max_elevation_degrees,omitempty"`
	// The time of the max elevation during the pass.
	MaxElevationTime *timestamp.Timestamp `protobuf:"bytes,8,opt,name=max_elevation_time,json=maxElevationTime,proto3" json:"max_elevation_time,omitempty"`
	// The center frequency, in Hz, for downlinking in this pass. 0 if downlink is not available in
	// this pass.
	DownlinkCenterFrequencyHz float64 `protobuf:"fixed64,9,opt,name=downlink_center_frequency_hz,json=downlinkCenterFrequencyHz,proto3" json:"downlink_center_frequency_hz,omitempty"`
	// The center frequency, in Hz, for uplinking in this pass. 0 if uplink is not available in
	// this pass.
	UplinkCenterFrequencyHz float64  `protobuf:"fixed64,10,opt,name=uplink_center_frequency_hz,json=uplinkCenterFrequencyHz,proto3" json:"uplink_center_frequency_hz,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *Pass) Reset()         { *m = Pass{} }
func (m *Pass) String() string { return proto.CompactTextString(m) }
func (*Pass) ProtoMessage()    {}
func (*Pass) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_6f240bf3576d2939, []int{7}
}
func (m *Pass) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pass.Unmarshal(m, b)
}
func (m *Pass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pass.Marshal(b, m, deterministic)
}
func (dst *Pass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pass.Merge(dst, src)
}
func (m *Pass) XXX_Size() int {
	return xxx_messageInfo_Pass.Size(m)
}
func (m *Pass) XXX_DiscardUnknown() {
	xxx_messageInfo_Pass.DiscardUnknown(m)
}

var xxx_messageInfo_Pass proto.InternalMessageInfo

func (m *Pass) GetReservationToken() string {
	if m != nil {
		return m.ReservationToken
	}
	return ""
}

func (m *Pass) GetAosTime() *timestamp.Timestamp {
	if m != nil {
		return m.AosTime
	}
	return nil
}

func (m *Pass) GetLosTime() *timestamp.Timestamp {
	if m != nil {
		return m.LosTime
	}
	return nil
}

func (m *Pass) GetGroundStationLatitude() float64 {
	if m != nil {
		return m.GroundStationLatitude
	}
	return 0
}

func (m *Pass) GetGroundStationLongitude() float64 {
	if m != nil {
		return m.GroundStationLongitude
	}
	return 0
}

func (m *Pass) GetGroundStationCountryCode() string {
	if m != nil {
		return m.GroundStationCountryCode
	}
	return ""
}

func (m *Pass) GetMaxElevationDegrees() float64 {
	if m != nil {
		return m.MaxElevationDegrees
	}
	return 0
}

func (m *Pass) GetMaxElevationTime() *timestamp.Timestamp {
	if m != nil {
		return m.MaxElevationTime
	}
	return nil
}

func (m *Pass) GetDownlinkCenterFrequencyHz() float64 {
	if m != nil {
		return m.DownlinkCenterFrequencyHz
	}
	return 0
}

func (m *Pass) GetUplinkCenterFrequencyHz() float64 {
	if m != nil {
		return m.UplinkCenterFrequencyHz
	}
	return 0
}

func init() {
	proto.RegisterType((*SatelliteStreamRequest)(nil), "stellarstation.api.v1.SatelliteStreamRequest")
	proto.RegisterType((*SendSatelliteCommandsRequest)(nil), "stellarstation.api.v1.SendSatelliteCommandsRequest")
	proto.RegisterType((*SatelliteStreamResponse)(nil), "stellarstation.api.v1.SatelliteStreamResponse")
	proto.RegisterType((*ReceiveTelemetryResponse)(nil), "stellarstation.api.v1.ReceiveTelemetryResponse")
	proto.RegisterType((*Telemetry)(nil), "stellarstation.api.v1.Telemetry")
	proto.RegisterType((*ListUpcomingAvailablePassesRequest)(nil), "stellarstation.api.v1.ListUpcomingAvailablePassesRequest")
	proto.RegisterType((*ListUpcomingAvailablePassesResponse)(nil), "stellarstation.api.v1.ListUpcomingAvailablePassesResponse")
	proto.RegisterType((*Pass)(nil), "stellarstation.api.v1.Pass")
	proto.RegisterEnum("stellarstation.api.v1.Framing", Framing_name, Framing_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StellarStationServiceClient is the client API for StellarStationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StellarStationServiceClient interface {
	// Lists upcoming passes for a satellite. Passes that can be scheduled for the satellite with an
	// Acquisition of Signal (AOS) within 14 days from now will be returned. This method does not
	// reserve passes in any way - it is possible for a pass that is returned by this method to be
	// unschedulable when actually trying to schedule because a conflict appeared during that time.
	//
	// If the satellite is not found or the client is not authorized for it, the request will return
	// a `NOT_FOUND` error.
	ListUpcomingAvailablePasses(ctx context.Context, in *ListUpcomingAvailablePassesRequest, opts ...grpc.CallOption) (*ListUpcomingAvailablePassesResponse, error)
	// Open a stream to a satellite. The returned stream is bi-directional - it can be used by the
	// client to send commands to the satellite and data received from the satellite will be returned
	// as it is made available. All telemetry received from the satellite on reserved passes from this
	// point on will be returned as soon as this method is called. If
	// `SatelliteStreamRequest.stream_id` is specified, any messages that have been buffered for the
	// stream will be returned as well.
	//
	// The stream can be left open for any amount of time and telemetry will be received as available
	// and returned. When the client is done with the stream, it should close it successfully. If the
	// stream is cancelled with an unexpected error at any point, telemetry received before the next
	// call to `OpenSatelliteStream` to resume the stream will be buffered up to 1 minute, and if no
	// call to `OpenSatelliteStream` is made with `stream_id` specified to resume the stream, it will
	// expire in 10 minutes and a call to `OpenSatelliteStream` with that `stream_id` will be closed
	// with a `ABORTED` error.
	//
	// If the satellite is not found or the client is not authorized for it, the stream will be closed
	// with a `NOT_FOUND` error.
	OpenSatelliteStream(ctx context.Context, opts ...grpc.CallOption) (StellarStationService_OpenSatelliteStreamClient, error)
}

type stellarStationServiceClient struct {
	cc *grpc.ClientConn
}

func NewStellarStationServiceClient(cc *grpc.ClientConn) StellarStationServiceClient {
	return &stellarStationServiceClient{cc}
}

func (c *stellarStationServiceClient) ListUpcomingAvailablePasses(ctx context.Context, in *ListUpcomingAvailablePassesRequest, opts ...grpc.CallOption) (*ListUpcomingAvailablePassesResponse, error) {
	out := new(ListUpcomingAvailablePassesResponse)
	err := c.cc.Invoke(ctx, "/stellarstation.api.v1.StellarStationService/ListUpcomingAvailablePasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stellarStationServiceClient) OpenSatelliteStream(ctx context.Context, opts ...grpc.CallOption) (StellarStationService_OpenSatelliteStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StellarStationService_serviceDesc.Streams[0], "/stellarstation.api.v1.StellarStationService/OpenSatelliteStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &stellarStationServiceOpenSatelliteStreamClient{stream}
	return x, nil
}

type StellarStationService_OpenSatelliteStreamClient interface {
	Send(*SatelliteStreamRequest) error
	Recv() (*SatelliteStreamResponse, error)
	grpc.ClientStream
}

type stellarStationServiceOpenSatelliteStreamClient struct {
	grpc.ClientStream
}

func (x *stellarStationServiceOpenSatelliteStreamClient) Send(m *SatelliteStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stellarStationServiceOpenSatelliteStreamClient) Recv() (*SatelliteStreamResponse, error) {
	m := new(SatelliteStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StellarStationServiceServer is the server API for StellarStationService service.
type StellarStationServiceServer interface {
	// Lists upcoming passes for a satellite. Passes that can be scheduled for the satellite with an
	// Acquisition of Signal (AOS) within 14 days from now will be returned. This method does not
	// reserve passes in any way - it is possible for a pass that is returned by this method to be
	// unschedulable when actually trying to schedule because a conflict appeared during that time.
	//
	// If the satellite is not found or the client is not authorized for it, the request will return
	// a `NOT_FOUND` error.
	ListUpcomingAvailablePasses(context.Context, *ListUpcomingAvailablePassesRequest) (*ListUpcomingAvailablePassesResponse, error)
	// Open a stream to a satellite. The returned stream is bi-directional - it can be used by the
	// client to send commands to the satellite and data received from the satellite will be returned
	// as it is made available. All telemetry received from the satellite on reserved passes from this
	// point on will be returned as soon as this method is called. If
	// `SatelliteStreamRequest.stream_id` is specified, any messages that have been buffered for the
	// stream will be returned as well.
	//
	// The stream can be left open for any amount of time and telemetry will be received as available
	// and returned. When the client is done with the stream, it should close it successfully. If the
	// stream is cancelled with an unexpected error at any point, telemetry received before the next
	// call to `OpenSatelliteStream` to resume the stream will be buffered up to 1 minute, and if no
	// call to `OpenSatelliteStream` is made with `stream_id` specified to resume the stream, it will
	// expire in 10 minutes and a call to `OpenSatelliteStream` with that `stream_id` will be closed
	// with a `ABORTED` error.
	//
	// If the satellite is not found or the client is not authorized for it, the stream will be closed
	// with a `NOT_FOUND` error.
	OpenSatelliteStream(StellarStationService_OpenSatelliteStreamServer) error
}

func RegisterStellarStationServiceServer(s *grpc.Server, srv StellarStationServiceServer) {
	s.RegisterService(&_StellarStationService_serviceDesc, srv)
}

func _StellarStationService_ListUpcomingAvailablePasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUpcomingAvailablePassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StellarStationServiceServer).ListUpcomingAvailablePasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellarstation.api.v1.StellarStationService/ListUpcomingAvailablePasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StellarStationServiceServer).ListUpcomingAvailablePasses(ctx, req.(*ListUpcomingAvailablePassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StellarStationService_OpenSatelliteStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StellarStationServiceServer).OpenSatelliteStream(&stellarStationServiceOpenSatelliteStreamServer{stream})
}

type StellarStationService_OpenSatelliteStreamServer interface {
	Send(*SatelliteStreamResponse) error
	Recv() (*SatelliteStreamRequest, error)
	grpc.ServerStream
}

type stellarStationServiceOpenSatelliteStreamServer struct {
	grpc.ServerStream
}

func (x *stellarStationServiceOpenSatelliteStreamServer) Send(m *SatelliteStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stellarStationServiceOpenSatelliteStreamServer) Recv() (*SatelliteStreamRequest, error) {
	m := new(SatelliteStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StellarStationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stellarstation.api.v1.StellarStationService",
	HandlerType: (*StellarStationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUpcomingAvailablePasses",
			Handler:    _StellarStationService_ListUpcomingAvailablePasses_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenSatelliteStream",
			Handler:       _StellarStationService_OpenSatelliteStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stellarstation/api/v1/stellarstation.proto",
}

func init() {
	proto.RegisterFile("stellarstation/api/v1/stellarstation.proto", fileDescriptor_stellarstation_6f240bf3576d2939)
}

var fileDescriptor_stellarstation_6f240bf3576d2939 = []byte{
	// 901 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x51, 0x73, 0xdb, 0x44,
	0x10, 0xc7, 0x23, 0xdb, 0x8d, 0xed, 0x75, 0x28, 0xe6, 0x82, 0x1b, 0xd5, 0xc9, 0x50, 0xd7, 0xbc,
	0x78, 0xca, 0x60, 0x53, 0x77, 0xca, 0xa4, 0x30, 0xc0, 0xc4, 0x21, 0x89, 0x3d, 0x93, 0x42, 0x2a,
	0x19, 0x86, 0xe9, 0x8b, 0xe6, 0x22, 0x6d, 0x5c, 0x4d, 0x25, 0x9d, 0xd0, 0x9d, 0x4d, 0xd2, 0xe1,
	0x63, 0xf0, 0x21, 0x78, 0xe0, 0x8d, 0xef, 0xc1, 0x33, 0x1f, 0x87, 0xb9, 0xd3, 0xc9, 0x89, 0x9d,
	0xc8, 0xee, 0xf0, 0x66, 0xed, 0x7f, 0x7f, 0x7b, 0x7b, 0x7f, 0xed, 0x5a, 0xf0, 0x84, 0x0b, 0x0c,
	0x02, 0x9a, 0x70, 0x41, 0x85, 0xcf, 0xa2, 0x1e, 0x8d, 0xfd, 0xde, 0xec, 0x69, 0x6f, 0x31, 0xda,
	0x8d, 0x13, 0x26, 0x18, 0x69, 0x2c, 0x45, 0x69, 0xec, 0x77, 0x67, 0x4f, 0x9b, 0x8f, 0x26, 0x8c,
	0x4d, 0x02, 0xec, 0xa9, 0xa4, 0xf3, 0xe9, 0x45, 0x4f, 0xf8, 0x21, 0x72, 0x41, 0xc3, 0x38, 0xe5,
	0xda, 0x7f, 0x15, 0xe0, 0x81, 0x4d, 0x25, 0xeb, 0x0b, 0xb4, 0x45, 0x82, 0x34, 0xb4, 0xf0, 0xd7,
	0x29, 0x72, 0x41, 0x1e, 0xc3, 0x16, 0xcf, 0x14, 0xc7, 0xf7, 0x4c, 0xa3, 0x65, 0x74, 0xaa, 0x56,
	0x6d, 0x1e, 0x1b, 0x79, 0x64, 0x17, 0xaa, 0x5c, 0x31, 0x52, 0x2f, 0x28, 0xbd, 0x92, 0x06, 0x46,
	0x1e, 0xf9, 0x1d, 0x1e, 0x71, 0x8c, 0x3c, 0xe7, 0xba, 0x88, 0xcb, 0xc2, 0x90, 0x46, 0x1e, 0x77,
	0x92, 0xf4, 0x08, 0xb3, 0xd8, 0x32, 0x3a, 0xb5, 0xfe, 0xb3, 0xee, 0x9d, 0xcd, 0x77, 0x6d, 0x8c,
	0xbc, 0x79, 0x6f, 0x87, 0x9a, 0xd5, 0xdd, 0x0d, 0x37, 0xac, 0x3d, 0xbe, 0x42, 0x27, 0x23, 0xa8,
	0x53, 0xd7, 0xc5, 0x58, 0xa0, 0xe7, 0x5c, 0x24, 0x34, 0xf4, 0xa3, 0x89, 0x59, 0x6a, 0x15, 0x3b,
	0xf7, 0xfb, 0x9f, 0xe4, 0x1c, 0x77, 0x9c, 0x66, 0x59, 0x1f, 0x66, 0x9c, 0x0e, 0x0c, 0xaa, 0x50,
	0xd6, 0x55, 0xdb, 0xfb, 0xb0, 0xb7, 0xaa, 0x2b, 0x62, 0x42, 0x59, 0x5f, 0xd2, 0x2c, 0xb4, 0x8a,
	0x9d, 0x2d, 0x2b, 0x7b, 0x6c, 0xff, 0x6d, 0xc0, 0xce, 0x2d, 0xa3, 0x79, 0xcc, 0x22, 0x8e, 0x8b,
	0x36, 0x1a, 0x4b, 0x36, 0x32, 0x68, 0x26, 0xe8, 0xa2, 0x3f, 0x43, 0x47, 0x60, 0x80, 0x21, 0x8a,
	0xe4, 0xca, 0x49, 0x34, 0xaa, 0x4c, 0xaf, 0xf5, 0x7b, 0x39, 0x57, 0xb2, 0x52, 0x70, 0x9c, 0x71,
	0xd9, 0x89, 0xc3, 0x0d, 0xcb, 0x4c, 0x72, 0xb4, 0x01, 0x40, 0x25, 0xfb, 0xdd, 0x7e, 0x0d, 0x66,
	0x5e, 0x0d, 0xf2, 0x2d, 0x54, 0xe7, 0x0d, 0xa9, 0xae, 0x6b, 0xfd, 0x56, 0x4e, 0x1f, 0xd7, 0xf0,
	0x35, 0xd2, 0xfe, 0xb7, 0x00, 0xd5, 0xb9, 0x40, 0xf6, 0xa1, 0x9c, 0xbd, 0x26, 0x59, 0x6b, 0xfd,
	0x6b, 0xca, 0xd2, 0x09, 0x81, 0x92, 0x47, 0x05, 0x55, 0x56, 0x6c, 0x59, 0xea, 0x37, 0xe9, 0x43,
	0xc3, 0x63, 0xbf, 0x45, 0x81, 0x1f, 0xbd, 0x75, 0x2e, 0xd4, 0xb4, 0x45, 0xee, 0x95, 0xf3, 0xe6,
	0x9d, 0x9a, 0xb8, 0x92, 0xb5, 0x9d, 0x89, 0xc7, 0x99, 0x36, 0x7c, 0x47, 0x6c, 0x30, 0xe5, 0x76,
	0x38, 0x17, 0x7e, 0xc2, 0x85, 0x73, 0x7e, 0x25, 0xd0, 0xd1, 0x1e, 0x79, 0x66, 0x49, 0x5d, 0xaf,
	0xd9, 0x4d, 0xd7, 0xa9, 0x9b, 0xad, 0x53, 0x77, 0x9c, 0xad, 0x93, 0xd5, 0x90, 0xec, 0xb1, 0x44,
	0x07, 0x57, 0x02, 0xb5, 0x69, 0x1e, 0x79, 0x05, 0x3b, 0xaa, 0x68, 0x40, 0x6f, 0xd5, 0xbc, 0xb7,
	0xb6, 0xe6, 0xc7, 0x12, 0x3d, 0xa5, 0x4b, 0x25, 0x1f, 0xc3, 0x96, 0xbc, 0x3a, 0x3a, 0x6f, 0x90,
	0x7a, 0x98, 0x98, 0x9b, 0xea, 0xde, 0x35, 0x15, 0x1b, 0xaa, 0x50, 0xfb, 0x04, 0xda, 0xa7, 0x3e,
	0x17, 0x3f, 0xc5, 0x2e, 0x93, 0x16, 0x1d, 0xcc, 0xa8, 0x1f, 0xd0, 0xf3, 0x00, 0xcf, 0x28, 0xe7,
	0xc8, 0xdf, 0x7f, 0xc1, 0xdb, 0x3f, 0xc3, 0xa7, 0x2b, 0x0b, 0xe9, 0x51, 0xe8, 0x41, 0x29, 0xa6,
	0x9c, 0x9b, 0x46, 0xab, 0xd8, 0xa9, 0xf5, 0x77, 0x73, 0xde, 0x9c, 0x84, 0x2c, 0x95, 0xd8, 0xfe,
	0xa7, 0x04, 0x25, 0xf9, 0x48, 0x3e, 0x83, 0x8f, 0x12, 0xe4, 0x98, 0xcc, 0x54, 0xa6, 0x23, 0xd8,
	0x5b, 0x8c, 0x74, 0x23, 0xf5, 0x1b, 0xc2, 0x58, 0xc6, 0xc9, 0x73, 0xa8, 0x50, 0xc6, 0x1d, 0xe9,
	0x8a, 0x1e, 0xfc, 0x55, 0xee, 0x95, 0x29, 0xe3, 0xf2, 0x49, 0x62, 0x41, 0x86, 0x15, 0xd7, 0x63,
	0x81, 0xc6, 0xbe, 0x84, 0x9d, 0x49, 0xc2, 0xa6, 0xf2, 0x1f, 0x2c, 0xbd, 0x87, 0x13, 0x50, 0xe1,
	0x8b, 0xa9, 0x87, 0x6a, 0x1c, 0x0c, 0xab, 0x91, 0xca, 0x76, 0xaa, 0x9e, 0x6a, 0x91, 0xec, 0x83,
	0xb9, 0xcc, 0xb1, 0x68, 0x92, 0x82, 0xf7, 0x14, 0xf8, 0x60, 0x11, 0xcc, 0x54, 0xf2, 0x0d, 0xec,
	0x2e, 0x91, 0x2e, 0x9b, 0x46, 0x72, 0xdf, 0x5d, 0xe6, 0xa1, 0x7a, 0xd1, 0x55, 0xcb, 0x5c, 0x80,
	0x0f, 0xd3, 0x84, 0x43, 0xe6, 0xa1, 0x1c, 0xfa, 0x90, 0x5e, 0x3a, 0x18, 0xa0, 0x76, 0xd3, 0xc3,
	0x49, 0x82, 0xc8, 0xcd, 0xb2, 0x3a, 0x75, 0x3b, 0xa4, 0x97, 0x47, 0x99, 0xf6, 0x7d, 0x2a, 0x91,
	0x21, 0x90, 0x45, 0x46, 0xb9, 0x54, 0x59, 0xeb, 0x52, 0xfd, 0x66, 0x31, 0x65, 0xd7, 0x77, 0xb0,
	0x37, 0x5f, 0x39, 0x17, 0x23, 0x81, 0xc9, 0xe2, 0xe6, 0x55, 0x55, 0x13, 0x0f, 0xb3, 0x9c, 0x43,
	0x95, 0x72, 0x73, 0xff, 0xbe, 0x86, 0xe6, 0x34, 0xce, 0xc5, 0x41, 0xe1, 0x3b, 0x69, 0xc6, 0x2d,
	0xf8, 0xc9, 0x0b, 0x28, 0xeb, 0x3f, 0x06, 0xf2, 0x01, 0x54, 0x07, 0xa3, 0xb1, 0x3d, 0xb6, 0x8e,
	0x0e, 0x5e, 0xd6, 0x37, 0x48, 0x05, 0x4a, 0x07, 0xbf, 0xf4, 0x9f, 0xd7, 0x0d, 0xb2, 0x09, 0x85,
	0xd1, 0xab, 0x7a, 0x41, 0x26, 0x8c, 0x5e, 0x1e, 0x9c, 0x1c, 0x39, 0x67, 0x3f, 0x9c, 0xd4, 0x8b,
	0xfd, 0x3f, 0x0b, 0xd0, 0xb0, 0xd3, 0x81, 0xd5, 0xa6, 0xda, 0x98, 0xcc, 0x7c, 0x17, 0xc9, 0x1f,
	0x06, 0xec, 0xae, 0x18, 0x7f, 0xf2, 0x22, 0x67, 0xd0, 0xd7, 0xef, 0x5e, 0xf3, 0xab, 0xff, 0x83,
	0xea, 0x6d, 0xbb, 0x84, 0xed, 0x1f, 0x63, 0x8c, 0x96, 0xbe, 0x26, 0xe4, 0xf3, 0xbc, 0xcf, 0xe8,
	0x9d, 0x9f, 0xf7, 0x66, 0xf7, 0x7d, 0xd3, 0xd3, 0x53, 0x3b, 0xc6, 0x17, 0xc6, 0x60, 0x00, 0x0f,
	0x5d, 0x16, 0xde, 0x0d, 0x0e, 0xb6, 0xed, 0x85, 0xf0, 0x99, 0x1c, 0x9a, 0x33, 0xe3, 0xf5, 0xfd,
	0xc5, 0xec, 0xf3, 0x4d, 0x35, 0x4d, 0xcf, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x2d, 0xed,
	0x54, 0xde, 0x08, 0x00, 0x00,
}
